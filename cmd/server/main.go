package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"time"

	"connectrpc.com/connect"
	"github.com/rs/cors"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	greetv1 "example/gen/greet/v1"        // generated by protoc-gen-go
	"example/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
)

type GreetServer struct{}

func (s *GreetServer) Greet(ctx context.Context, req *connect.Request[greetv1.GreetRequest]) (*connect.Response[greetv1.GreetResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

// Add the streaming implementation
func (s *GreetServer) GreetStream(ctx context.Context, req *connect.Request[greetv1.GreetRequest], stream *connect.ServerStream[greetv1.GreetResponse]) error {
	log.Printf("Started streaming for client: %s\n", req.Msg.Name)
	
	// Example greetings with different formats
	greetingFormats := []struct {
		format string
		number int32
	}{
		{"Hello %s! Welcome to the stream", 1},
		{"How are you doing today, %s?", 2},
		{"Greetings and salutations, %s!", 3},
		{"Hope you're having a great day, %s", 4},
		{"Thank you for joining us, %s", 5},
	}

	for _, g := range greetingFormats {
		// Check if client has disconnected
		if ctx.Err() != nil {
			log.Printf("Client disconnected: %v\n", ctx.Err())
			return ctx.Err()
		}

		// Create the greeting message
		greeting := fmt.Sprintf(g.format, req.Msg.Name)
		
		// Send the response
		err := stream.Send(&greetv1.GreetResponse{
			Greeting:       greeting,
			GreetingNumber: g.number,
		})
		
		if err != nil {
			log.Printf("Error sending message: %v\n", err)
			return connect.NewError(connect.CodeInternal, err)
		}

		// Log the sent message
		log.Printf("Sent greeting %d: %s\n", g.number, greeting)

		// Add a small delay between messages
		time.Sleep(1 * time.Second)
	}

	log.Printf("Finished streaming for client: %s\n", req.Msg.Name)
	return nil
}

func main() {
	greeter := &GreetServer{}
	mux := http.NewServeMux()
	path, handler := greetv1connect.NewGreetServiceHandler(greeter)
	mux.Handle(path, handler)

	// Create CORS middleware
	corsMiddleware := cors.New(cors.Options{
		AllowedOrigins: []string{"http://localhost:8003"}, // Allow your HTML server origin
		AllowedMethods: []string{
			http.MethodPost,
			http.MethodGet,
			http.MethodOptions,
		},
		AllowedHeaders: []string{
			"Accept",
			"Content-Type",
			"Connect-Protocol-Version",
			"Connect-Timeout-Ms",
			"Grpc-Timeout",
			"X-Grpc-Web",
			"X-User-Agent",
		},
		ExposedHeaders: []string{
			"Grpc-Status",
			"Grpc-Message",
			"Grpc-Status-Details-Bin",
			"Greet-Version", // Add your custom header
		},
	})

	// Wrap the h2c handler with CORS middleware
	h2cHandler := h2c.NewHandler(mux, &http2.Server{})
	corsHandler := corsMiddleware.Handler(h2cHandler)

	log.Println("Starting server on localhost:8080")
	if err := http.ListenAndServe("localhost:8080", corsHandler); err != nil {
		log.Fatal(err)
	}
}
